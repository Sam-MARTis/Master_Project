{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<style>\n        #headerDiv {\n            display: flex;\n        }\n        #firstCanvas{\n            border: 1px solid black;\n            background-color: black;\n\n\n        }\n        .myBut{\n            left: 100px;\n            top: 100px;\n            z-index: 100;\n            background-color:beige;\n\n        }\n        .myBut:hover{\n            transform: scale(1.07);\n        }\n        #labelSpan{\n            margin-left: 20px;\n            margin-right: 5px;\n            margin-top: 3px;\n            color:beige;\n        }\n        #mainContainer{\n            background-color: black;\n        }\n\n    </style>\n    <div id = 'mainContainer'>\n    <div id = 'headerDiv'>\n        <button class= 'myBut' id=\"but1\" type=\"button\">Fast Forward</button>\n        <button class= 'myBut' id=\"but2\" type=\"button\" >Speed up</button>\n        <button class= 'myBut' id=\"but3\" type=\"button\" >Normal</button>\n        <button class= 'myBut' id=\"but4\" type=\"button\" >Slow down</button>\n        <button class= 'myBut' id=\"but5\" type=\"button\" >Clear </button>\n        <button class= 'myBut' id=\"but6\" type=\"button\" >New</button>\n        <span id=\"labelSpan\"> Attractors: </span>\n        <button class= 'myBut' id=\"but7\" type=\"button\" >Chen </button>\n        <button class= 'myBut' id=\"but8\" type=\"button\" >Lorentz</button>\n\n    \n    </div>\n    </div>\n    <canvas id=\"firstCanvas\">\n    </canvas>",
      "status": "",
      "output": "<style>\n        #headerDiv {\n            display: flex;\n        }\n        #firstCanvas{\n            border: 1px solid black;\n            background-color: black;\n\n\n        }\n        .myBut{\n            left: 100px;\n            top: 100px;\n            z-index: 100;\n            background-color:beige;\n\n        }\n        .myBut:hover{\n            transform: scale(1.07);\n        }\n        #labelSpan{\n            margin-left: 20px;\n            margin-right: 5px;\n            margin-top: 3px;\n            color:beige;\n        }\n        #mainContainer{\n            background-color: black;\n        }\n\n    </style>\n    <div id=\"mainContainer\">\n    <div id=\"headerDiv\">\n        <button class=\"myBut\" id=\"but1\" type=\"button\">Fast Forward</button>\n        <button class=\"myBut\" id=\"but2\" type=\"button\">Speed up</button>\n        <button class=\"myBut\" id=\"but3\" type=\"button\">Normal</button>\n        <button class=\"myBut\" id=\"but4\" type=\"button\">Slow down</button>\n        <button class=\"myBut\" id=\"but5\" type=\"button\">Clear </button>\n        <button class=\"myBut\" id=\"but6\" type=\"button\">New</button>\n        <span id=\"labelSpan\"> Attractors: </span>\n        <button class=\"myBut\" id=\"but7\" type=\"button\">Chen </button>\n        <button class=\"myBut\" id=\"but8\" type=\"button\">Lorentz</button>\n\n    \n    </div>\n    </div>\n    <canvas id=\"firstCanvas\" width=\"1072\" height=\"470\">\n    </canvas>",
      "type": "html"
    },
    {
      "code": "//Declaring some variables and parameters\n\nvar unitVel = 100; //used to normalize pen velocity. normalvel = penvel/unitVel\nvar ff = 0;  //Boolean. fast forward\nvar timeDelay = 1; //How quickly it draws lines\nvar endMove = 0;\n// Getting html5 canvas ready \nvar canvas = document.getElementById('firstCanvas');\nconsole.log(canvas);\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\nconsole.log(canvas.height, canvas.width);\nvar c = canvas.getContext('2d');\nc.strokeStyle = 'rgb(200, 0,0)';\nc.lineWidth= 1;\n\n\n\n// The below line is what resizes the graph to fit screensize in all devices.\nvar scaleFactor = Math.min(canvas.height/968, canvas.width/1260);\n\n\n//More variables. r, g, b are declared to make a gradient depending on pen velocity\n\nvar std_dt = 0.005; //Standard time-step\nvar count = 0;\nvar x=-7.13;\nvar y=-7.11;\nvar z=25.41;\nvar b = 0;\nvar g = 0;\nvar r = 0;\nvar dt = 0.005;  //Actual used time-step\na = Promise.resolve();  //Starts with a resolved promise. We do .then to draw the next movement of the pen. \n// Promises were painful to learn since I had never used them before.\n\n\n\n\n\n\n\n// Button click functions\n\n\nconst clearScreen = () => {\n    c.clearRect(0, 0, canvas.width, canvas.height);\n}\nconst ffBut = () => {\n    dt = std_dt/2;  //the smaller the dt, the more accurate\n\n    ff = 1; //Command to fastforward\n}\nconst reloadScreen = () => {\n    endMove = 1;\n    // location.reload(); //reloads page when you press new\n    clearScreen();\n}\nconst speedUp = () => {\n    // timeDelay = 1;\n    dt = std_dt*1.5;  //this is what makes it speed up. however, this is unstable\n}\nconst slowDown = () => {\n    // timeDelay = 100;\n    dt = std_dt / 5;\n}\nconst normalSpeed = () => {\n    // timeDelay = 10;\n    dt = std_dt;\n}\n\nvar normalizeX = (x) =>{\n    return 0;\n}\nvar normalizeY = (y) =>{\n    return 0;\n}\n\n\nc.beginPath();\n\n\nconst command = (func, x, y, k) => {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            func(x, y, k);\n            resolve();\n        }, 1000);\n    });\n};\n\n\n\n\nc.moveTo(window.innerWidth/2,window.innerHeight/2);\n\n\nvar prev_pos = {x:normalizeX(y), y:normalizeY(z)};\nconst move = (x, y, col) => {\n    if(count=1){\n        c.beginPath();\n        c.strokeStyle = `rgb(${col.r}, 0, ${col.b})`;\n        count =0;\n    }\n    else{\n        count = 1;\n    }\n    c.moveTo(prev_pos.x, prev_pos.y);\n    \n    c.lineTo(x, y);\n    c.stroke();\n    c.moveTo(x, y);\n    prev_pos.x = x;\n    prev_pos.y = y;\n    \n}\n\n\n\n\n\n\n// c.moveTo(normalizeX(y), normalizeY(z));\n\nvar dxdt=(x,y,z) => {return 0;}\nvar dydt=(x,y,z)=> {return 0;}\nvar dzdt=(x,y,z) => {return 0;}\n\nconst proceed = (k) => {\nfor(let i=0; i<k; i++){\n    if(endMove ==1){\n            endMove = 0;\n            move(0,0)\n            break;\n        }\n    \n    a = a.then(\n            () => {\n                \n                command(move, normalizeX(x), normalizeY(z), {r:r, g:g, b:b});\n            }\n        )\n        .then(\n            () => {\n                \n                return new Promise(\n                    (resolve) => {\n                        var dfxdt = dxdt(x, y, z);\n                        var dfydt = dydt(x, y, z);\n                        var dfzdt = dzdt(x, y, z);\n                        let vel = ((dfxdt**2 + dfydt**2 + dfzdt**2)**0.5)/unitVel;\n                        r = Math.round(240*vel);\n                        b = Math.round(240* (1.5-vel));\n                        c.strokeStyle = `rgb(${r}, 0, ${b})`;\n                        \n\n                        x = x+(dfxdt*dt);\n                        y = y+(dfydt*dt);\n                        z = z+(dfzdt*dt);\n                    if(ff == 1){\n                        resolve();\n                    }\n                    else{\n                    console.log(timeDelay);\n                    setTimeout(resolve, timeDelay);\n                    }\n                    \n                    }   \n                );\n            }\n        );\n        \n    \n}\n}\n// proceed();\nconst lorentz = () =>{\n    unitVel = 100;\n    x=-7.13;\n    y=-7.11;\n    z=25.41;\n    std_dt = 0.003;\n    dt = std_dt;\n    normalizeX = (x) =>{\n        return (window.innerWidth/2 + 30*scaleFactor*x);\n    }\n    normalizeY = (y) =>{\n        return (window.innerHeight/2 - 18*scaleFactor*(y-25*scaleFactor));\n    }\n    prev_pos = {x:normalizeX(y), y:normalizeY(z)};\n    dxdt=(x,y,z) => {return 10*(y-x);}\n    dydt=(x,y,z)=> {return x*(28-z)-y;}\n    dzdt=(x,y,z) => {return x*y-8*z/3;}\n    proceed(Math.round(600000*(scaleFactor**0.2)));\n}\nconst chen = () => {\n    x=1.960;\n    y=2.04;\n    z=12.51;\n    std_dt = 0.0004;\n    dt = std_dt;\n    unitVel = 1500;\n    \n    \n    normalizeX = (x) =>{\n        return (window.innerWidth/2 + 20*scaleFactor*x);\n    }\n    normalizeY = (y) =>{\n        return (window.innerHeight/2 - 20*scaleFactor*(y-20*scaleFactor));\n    }\n    prev_pos = {x:normalizeX(y), y:normalizeY(z)};\n    dxdt=(x,y,z) => {return 400*(y-x);}\n    dydt=(x,y,z)=> {return -120*x-10*(x*z) +280*y ;}\n    dzdt=(x,y,z) => {return 10*x*y  - 30*z;}\n    proceed(Math.round(200000*(scaleFactor**0.2)));\n\n}\n\n\ndocument.getElementById('but1').addEventListener('click', ffBut);\ndocument.getElementById('but2').addEventListener('click', speedUp);\ndocument.getElementById('but3').addEventListener('click', normalSpeed);\ndocument.getElementById('but4').addEventListener('click', slowDown);\ndocument.getElementById('but5').addEventListener('click', clearScreen);\ndocument.getElementById('but6').addEventListener('click', reloadScreen);\ndocument.getElementById('but7').addEventListener('click', chen);\ndocument.getElementById('but8').addEventListener('click', lorentz);",
      "status": "[1]<br><span style=\"font-size:8px\">2ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}